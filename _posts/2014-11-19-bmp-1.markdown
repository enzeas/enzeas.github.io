---
layout: post
title:  "BMP格式图片的存储"
categories: 研究
tags: "读书笔记" 
---

### 简介 ###

BMP取自位图BitMaP的缩写，也称为DIB（设备无关位图），是Windows图形子系统（Graphics Device Interface）内部使用的一种位图图形格式。

### 格式组成 ###

典型的BMP图像文件由四部分组成：
1. 位图头文件数据结构，它包含BMP图像文件的类型、显示内容等信息；
2. 位图信息数据结构，它包含有BMP图像的宽、高、压缩方法，以及定义颜色等信息；
3. 调色板，这个部分是可选的，有些位图需要调色板，有些位图，比如真彩色图（24位的BMP）就不需要调色板；
4. 位图数据，这部分的内容根据BMP位图使用的位数不同而不同，在24位图中直接使用RGB，而其他的小于24位的使用调色板中颜色索引值。


名称		|windows.h中结构体	|大小
--------|-------------------|-----
文件头	|BITMAPFILEHEADER	|14
信息头	|BITMAPINFOHEADER	|40
调色板	|					|由颜色位数决定
位图数据	|					|由图像尺寸决定

### 文件头 ###

在windows.h为bmp文件头定义了如下结构体：
<pre>
typedef struct tagBITMAPFILEHEADER
{
	WORD bfType;//位图文件的类型，必须为BM
	DWORD bfSize;//位图文件的大小，以字节为单位
	WORD bfReserved1;//位图文件保留字，必须为0
	WORD bfReserved2;//位图文件保留字，必须为0
	DWORD bfOffBits;//位图数据的起始位置，以相对于位图文件头的偏移量表示，以字节为单位
}BITMAPFILEHEADER;
</pre>
注意：自己定义结构体的话由于对其的关系结构体的大小将会是16字节！而BitMap文件头占14字节空间，会导致错误，因此最好使用windows.h中自带的结构体。在我自定义的结构体中我删除了bfType这个unsigned short部分，剩下的数据占据12字节，通过先读取文件中两个字节再读取结构体能够完整读出数据。

这部分重要的部分在于bfSize和bfOffBits两部分。

bfSize需要计算整个文件的大小，即文件头、信息头、调色板和位图数据所有大小之和。
bfOffBits这个参数非常有用，因为调色板的长度通常可能是变化的，所以可以利用这个偏移值迅速从文件中读取到位图数据。

### 信息头 ###

信息头用于说明位图的尺寸等信息。结构体如下：
<pre>
typedef struct tagBITMAPINFOHEADER{
	DWORD biSize;//本结构所占用字节数
	LONG biWidth;//位图的宽度，以像素为单位
	LONG biHeight;//位图的高度，以像素为单位
	WORD biPlanes;//目标设备的级别(通常为1)
	WORD biBitCount;//每个像素所需的位数
	DWORD biCompression;//位图压缩类型，通常为0(不压缩)
	DWORD biSizeImage;//位图的大小(以字节为单位)
	LONG biXPelsPerMeter;//位图水平分辨率(通常为0)
	LONG biYPelsPerMeter;//位图垂直分辨率(通常为0)
	DWORDbiClrUsed;//位图实际使用的颜色表中的颜色数(通常为0)
	DWORDbiClrImportant;//位图显示过程中重要的颜色数(通常为0)
}BITMAPINFOHEADER;
</pre>

这部分重要的部分在biBitCount,BiWidth,biHeight,biSizeImage四个部分，biSize为此部分所占字节数通常为40，其他选项基本按默认值设置即可。

biBitCount为每个像素需要的位数，通常与调色板相关联。通常为1，4，8与24，分别对应双色，16色，256色与真彩色，其调色板大小分别为8，64，1024与0。

biWidth与biHeight为位图的宽与高，biSizeImage为图像的大小。其中涉及到一个对齐的问题，将在下文中提到。

### 调色板 ###

调色板是一个映射表，有若干个元素，其中每一个元素均是一个RGBQUAD结构，保存对应的Blue、Green、Red值(0-255)。每一个索引号均对应一种颜色，位图数据部分存放索引号即可。下面是RGBQUAD结构体的定义：
<pre>
typedef struct tagRGBQUAD{
	BYTE rgbBlue;//蓝色的亮度
	BYTE rgbGreen;//绿色的亮度
	BYTE rgbRed;//红色的亮度
	BYTE rgbReserved;//保留值(通常为0）
}RGBQUAD;
</pre>

### 位图数据 ###

位图数据记录了位图的每一个像素值，记录顺序是从左到右，从下到上。通常根据biBitCount值的大小决定数据的保存：

- 当biBitCount=1时，8个像素占一个字节
- 当biBitCount=4时，2个像素占一个字节
- 当biBitCount=8时，1个像素占一个字节
- 当biBitCount=24时，1个像素占三个字节，按顺序分别是BGR

数据区存储的是索引还是像素值由biBitCount决定，排列规则与前述一致。若为非真彩色位图，读取写入过程中可用掩码获取数据。若为真彩色则按照BGR顺序处理(没有调色板中那个保留值)。

Windows规定了一个扫描行所占的字节数必须是4的倍数(以long为单位)，不足的以0填充(样例见后文)，这样可以达到按行的快速存取。

- lineByte=(width\*biBitCount+31)/4/8\*4	(自己用的公式)
- lineByte=((width\*biBitCount+31)&~31)/8	(根据一个向8对齐改编的公式)

参考：

1. <a href="http://baike.baidu.com/subview/7671/8245150.htm?fr=aladdin" target="_blank">百度百科</a>
2. <a href="http://zh.wikipedia.org/wiki/BMP" target="_blank">维基百科</a>
